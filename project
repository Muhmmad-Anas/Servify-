import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  FlatList,
  Switch,
  Image,
} from "react-native";
import { Provider, useDispatch, useSelector } from "react-redux";
import { configureStore, createSlice } from "@reduxjs/toolkit";
import { initializeApp } from "firebase/app";
import { getDatabase, ref, onValue } from "firebase/database";
import {
  getAuth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  GoogleAuthProvider,
  signInWithPopup,
} from "firebase/auth";

const firebaseConfig = {
  apiKey: "AIzaSyApGQX30h33S2Je62AQsK24DClSK1F9WQw",
  authDomain: "survify-103d4.firebaseapp.com",
  databaseURL: "https://survify-103d4-default-rtdb.firebaseio.com",
  projectId: "survify-103d4",
  storageBucket: "survify-103d4.appspot.com",
  messagingSenderId: "111848839175",
  appId: "1:111848839175:web:857a133b3084e312c1b2a2",
  measurementId: "G-1MZS2EMMBM",
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const auth = getAuth(app);
const googleProvider = new GoogleAuthProvider();

const themeSlice = createSlice({
  name: "theme",
  initialState: { isDarkTheme: false },
  reducers: {
    toggleTheme: (state) => {
      state.isDarkTheme = !state.isDarkTheme;
    },
  },
});

const store = configureStore({ reducer: { theme: themeSlice.reducer } });
const { toggleTheme } = themeSlice.actions;

const SignupScreen = ({ onNavigate }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMessage, setErrorMessage] = useState("");

  const handleSignup = () => {
    createUserWithEmailAndPassword(auth, email, password)
      .then(() => onNavigate("Home"))
      .catch((error) => setErrorMessage(error.message));
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Signup</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <TouchableOpacity style={styles.button} onPress={handleSignup}>
        <Text style={styles.buttonText}>Sign Up</Text>
      </TouchableOpacity>
      {errorMessage ? <Text style={styles.errorText}>{errorMessage}</Text> : null}
    </View>
  );
};

const LoginScreen = ({ onLogin, onNavigate }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMessage, setErrorMessage] = useState("");

  const handleEmailLogin = () => {
    signInWithEmailAndPassword(auth, email, password)
      .then(() => onLogin())
      .catch((error) => setErrorMessage(error.message));
  };

  const handleGoogleLogin = () => {
    signInWithPopup(auth, googleProvider)
      .then(() => onLogin())
      .catch((error) => setErrorMessage(error.message));
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Login</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <TouchableOpacity style={styles.button} onPress={handleEmailLogin}>
        <Text style={styles.buttonText}>Login with Email</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.button} onPress={handleGoogleLogin}>
        <Text style={styles.buttonText}>Login with Google</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.button} onPress={() => onNavigate("Signup")}>
        <Text style={styles.buttonText}>Sign Up</Text>
      </TouchableOpacity>
      {errorMessage ? <Text style={styles.errorText}>{errorMessage}</Text> : null}
    </View>
  );
};

const HomeScreen = ({ onNavigate }) => {
  const dispatch = useDispatch();
  const isDarkTheme = useSelector((state) => state.theme.isDarkTheme);

  return (
    <View
      style={[styles.container, isDarkTheme ? styles.darkBackground : styles.lightBackground]}
    >
      <Text
        style={[styles.title, isDarkTheme ? styles.darkText : styles.lightText]}
      >
        Home
      </Text>
      <TouchableOpacity style={styles.button} onPress={() => onNavigate("Electrician")}>
        <Text style={styles.buttonText}>Electrician</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.button} onPress={() => onNavigate("Plumber")}>
        <Text style={styles.buttonText}>Plumber</Text>
      </TouchableOpacity>
      <View style={styles.themeToggle}>
        <Text style={isDarkTheme ? styles.darkText : styles.lightText}>
          Toggle Theme
        </Text>
        <Switch
          value={isDarkTheme}
          onValueChange={() => dispatch(toggleTheme())}
        />
      </View>
    </View>
  );
};

const ElectricianScreen = ({ onNavigate }) => {
  const [electricians, setElectricians] = useState([]);

  useEffect(() => {
    const electricianRef = ref(db, "Electrician/");
    onValue(electricianRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const electricianList = Object.keys(data.name).map((key) => ({
          id: key,
          name: data.name[key],
          category: data.Category[key],
          image: data.image[key],
        }));
        setElectricians(electricianList);
      }
    });
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Electrician Services</Text>
      <FlatList
        data={electricians}
        renderItem={({ item }) => (
          <View style={styles.tableRow}>
            <Image source={{ uri: item.image }} style={styles.image} />
            <Text>Name: {item.name}</Text>
            <Text>Category: {item.category}</Text>
          </View>
        )}
        keyExtractor={(item) => item.id}
      />
      <TouchableOpacity style={styles.button} onPress={() => onNavigate("Home")}>
        <Text style={styles.buttonText}>Back</Text>
      </TouchableOpacity>
    </View>
  );
};

const PlumberScreen = ({ onNavigate }) => {
  const [plumbers, setPlumbers] = useState([]);

  useEffect(() => {
    const plumberRef = ref(db, "Plumber/");
    onValue(plumberRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const plumberList = Object.keys(data.name).map((key) => ({
          id: key,
          name: data.name[key],
          category: data.Category[key],
          image: data.image[key],
        }));
        setPlumbers(plumberList);
      }
    });
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Plumber Services</Text>
      <FlatList
        data={plumbers}
        renderItem={({ item }) => (
          <View style={styles.tableRow}>
            <Image source={{ uri: item.image }} style={styles.image} />
            <Text>Name: {item.name}</Text>
            <Text>Category: {item.category}</Text>
          </View>
        )}
        keyExtractor={(item) => item.id}
      />
      <TouchableOpacity style={styles.button} onPress={() => onNavigate("Home")}>
        <Text style={styles.buttonText}>Back</Text>
      </TouchableOpacity>
    </View>
  );
};

const App = () => {
  const [screen, setScreen] = useState("Login");

  return (
    <Provider store={store}>
      {screen === "Login" && <LoginScreen onLogin={() => setScreen("Home")} onNavigate={(screen) => setScreen(screen)} />}
      {screen === "Signup" && <SignupScreen onNavigate={(screen) => setScreen(screen)} />}
      {screen === "Home" && <HomeScreen onNavigate={(screen) => setScreen(screen)} />}
      {screen === "Electrician" && <ElectricianScreen onNavigate={(screen) => setScreen(screen)} />}
      {screen === "Plumber" && <PlumberScreen onNavigate={(screen) => setScreen(screen)} />}
    </Provider>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20 },
  title: { fontSize: 24, fontWeight: "bold", marginBottom: 20 },
  input: { height: 40, borderColor: "#ccc", borderWidth: 1, padding: 10, marginBottom: 15 },
  button: { backgroundColor: "#007BFF", padding: 10, alignItems: "center", marginBottom: 15 },
  buttonText: { color: "white", fontSize: 16 },
  errorText: { color: "red" },
  tableRow: { marginBottom: 10, padding: 10, borderWidth: 1, borderColor: "#ddd" },
  image: { width: 100, height: 100, marginBottom: 10 },
  themeToggle: { flexDirection: "row", alignItems: "center" },
  lightBackground: { backgroundColor: "#fff" },
  darkBackground: { backgroundColor: "#333" },
  lightText: { color: "#000" },
  darkText: { color: "#fff" },
});

export default App;
